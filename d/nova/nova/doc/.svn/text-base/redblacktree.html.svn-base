
<html><head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta content="text/javascript" http-equiv="content-script-type">
<title>nova.ds.intrusive.redblacktree</title>
<link rel="stylesheet" type="text/css" href="candydoc/style.css">
<!--[if lt IE 7]><link rel="stylesheet" type="text/css" href="candydoc/ie56hack.css"><![endif]-->
<script language="JavaScript" src="candydoc/util.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/tree.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/explorer.js" type="text/javascript"></script>
</head><body>
<div id="tabarea"></div><div id="explorerclient"></div>
<div id="content"><script>explorer.initialize("nova.ds.intrusive.redblacktree");</script>
    <table class="content">
        <tr><td id="docbody"><h1>nova.ds.intrusive.redblacktree</h1><!-- Generated by Ddoc from ds\intrusive\redblacktree.d -->
<b>Autors:</b><br>
Klaus Oberhofer
<br><br>
<b>License:</b><br>
zlib/libpng license
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">struct 
<span class="currsymbol">
<span class="currsymbol">ParentLink</span>
<script>explorer.outline.addDecl('ParentLink');</script>

</span>
<script>explorer.outline.addDecl('
<span class="currsymbol">ParentLink</span>
<script>explorer.outline.addDecl('ParentLink');</script>

');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Link element introduced into the parent
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl></dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">struct 
<span class="currsymbol">
<span class="currsymbol">ChildLink</span>
<script>explorer.outline.addDecl('ChildLink');</script>

</span>
<script>explorer.outline.addDecl('
<span class="currsymbol">ChildLink</span>
<script>explorer.outline.addDecl('ChildLink');</script>

');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Link element introduced into the child
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl></dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">class 
<span class="currsymbol">
<span class="currsymbol">RedBlackTree</span>
<script>explorer.outline.addDecl('RedBlackTree');</script>

</span>
<script>explorer.outline.addDecl('
<span class="currsymbol">RedBlackTree</span>
<script>explorer.outline.addDecl('RedBlackTree');</script>

');</script>

(alias Accessor);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>An intrusive red/black tree implementation.
<br><br>
<img src="image/redblacktree.png"/>
<br><br>

	Usage patterns:
<br><br>

	1. Introduce link into child node class
<pre class="d_code">  <font color=blue>class</font> TreeNode
  {
    ...
    <font color=blue>public</font> :
      ChildLink!(TreeNode) link;   <font color=green>// link for rbtree
</font></pre>

	2. Introduce link into parent node class
<pre class="d_code">  <font color=blue>class</font> TreeParent
  {
    <font color=blue>public</font> :
      ParentLink!(TreeNode) parent;
</pre>

  3. Define accessor class (a static class is sufficient)
<pre class="d_code">  <font color=blue>static</font> <font color=blue>class</font> TreeParentAccessor
  {
    <font color=blue>public</font> :
      <font color=blue>alias</font> TreeParent ParentType;
      <font color=blue>alias</font> TreeNode   ChildType;
      <font color=blue>alias</font> <font color=blue>int</font>        KeyType;

    <font color=blue>public</font> :
      <font color=green>/// parent access
</font>      <font color=blue>static</font> ParentLink!(TreeNode)* getparent (TreeParent p)
      {
        <font color=blue>return</font> &amp;p.parent;
      }

      <font color=green>/// child access
</font>      <font color=blue>static</font> ChildLink!(TreeNode)*  getchild  (TreeNode c)
      {
        <font color=blue>return</font> &amp;c.link;
      };

      <font color=green>// key/node comparison
</font>      <font color=blue>static</font> <font color=blue>int</font> compareKey (TreeNode cur, <font color=blue>in</font> <font color=blue>int</font> key)
      {
        <font color=blue>return</font> cur.id - key;
      }

      <font color=blue>static</font> <font color=blue>int</font> compareNode(TreeNode lhs, TreeNode rhs)
      {
        <font color=blue>return</font> lhs.id - rhs.id;
      }
  }
</pre>

  4. Now we are ready to use it:
<pre class="d_code">  <font color=green>// aliases for specific manager classes
</font>  <font color=blue>alias</font> <u>RedBlackTree</u>!(TreeParentAccessor) Tree;

  <font color=green>// instantiate the specific manager classes
</font>  Tree tree;

  <font color=blue>int</font> main()
  {
    <font color=blue>auto</font> TreeParent  p = <font color=blue>new</font> TreeParent;

    <font color=green>// create nodes and connect to the two lists
</font>    <font color=blue>for</font> (<font color=blue>int</font> idx = 0; idx &lt; num; ++idx)
    {
      TreeNode a = <font color=blue>new</font> TreeNode(idx);
      tree.insert(p, a);
    }

    tree.PrintSideWays(p);
  }
</pre>

<br><br>


<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">getleft</span>
<script>explorer.outline.addDecl('getleft');</script>

(ChildType <span class="funcparam">cur</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>child access
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">getroot</span>
<script>explorer.outline.addDecl('getroot');</script>

(ParentType <span class="funcparam">cur</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parent access
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">compareKey</span>
<script>explorer.outline.addDecl('compareKey');</script>

(ChildType <span class="funcparam">cur</span>, KeyType <span class="funcparam">key</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><span class="funcparam">key</span>  comparison
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">compareNode</span>
<script>explorer.outline.addDecl('compareNode');</script>

(ChildType <span class="funcparam">lhs</span>, ChildType <span class="funcparam">rhs</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>node comparison
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">height</span>
<script>explorer.outline.addDecl('height');</script>

(ChildType <span class="funcparam">root</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>returns 
<span class="currsymbol">height</span>
<script>explorer.outline.addDecl('height');</script>

 of tree at node <span class="funcparam">root</span>
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">count</span>
<script>explorer.outline.addDecl('count');</script>

(ChildType <span class="funcparam">root</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>returns number of nodes within tree
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">getMin</span>
<script>explorer.outline.addDecl('getMin');</script>

(ChildType <span class="funcparam">root</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>get child node with "minimum" value
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">getMax</span>
<script>explorer.outline.addDecl('getMax');</script>

(ChildType <span class="funcparam">root</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>get child node with "maximum" value
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">insert</span>
<script>explorer.outline.addDecl('insert');</script>

(ParentType <span class="funcparam">parent</span>, ChildType <span class="funcparam">node</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>
<span class="currsymbol">insert</span>
<script>explorer.outline.addDecl('insert');</script>

 child <span class="funcparam">node</span> into tree
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">remove</span>
<script>explorer.outline.addDecl('remove');</script>

(ParentType <span class="funcparam">parent</span>, KeyType <span class="funcparam">compare</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>
<span class="currsymbol">remove</span>
<script>explorer.outline.addDecl('remove');</script>

 child node which matches key from the tree
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">find</span>
<script>explorer.outline.addDecl('find');</script>

(ParentType <span class="funcparam">parent</span>, KeyType <span class="funcparam">compare</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>
<span class="currsymbol">find</span>
<script>explorer.outline.addDecl('find');</script>

 child node which matches key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">findUpper</span>
<script>explorer.outline.addDecl('findUpper');</script>

(ParentType <span class="funcparam">parent</span>, KeyType <span class="funcparam">compare</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>find child node which is "above" given key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">findLower</span>
<script>explorer.outline.addDecl('findLower');</script>

(ParentType <span class="funcparam">parent</span>, KeyType <span class="funcparam">compare</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>find child node which is "below" given key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">findUpperOrEq</span>
<script>explorer.outline.addDecl('findUpperOrEq');</script>

(ParentType <span class="funcparam">parent</span>, KeyType <span class="funcparam">compare</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>find child node which is above or equal to the given key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">findLowerOrEq</span>
<script>explorer.outline.addDecl('findLowerOrEq');</script>

(ParentType <span class="funcparam">parent</span>, KeyType <span class="funcparam">compare</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>find child node which is below or equal to the given key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">clear</span>
<script>explorer.outline.addDecl('clear');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>
<span class="currsymbol">clear</span>
<script>explorer.outline.addDecl('clear');</script>

 tree
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">isEmpty</span>
<script>explorer.outline.addDecl('isEmpty');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>returns 1 when tree is empty
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">height</span>
<script>explorer.outline.addDecl('height');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>determine 
<span class="currsymbol">height</span>
<script>explorer.outline.addDecl('height');</script>

 of tree
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">count</span>
<script>explorer.outline.addDecl('count');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>return number of nodes maintained by tree
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">getMin</span>
<script>explorer.outline.addDecl('getMin');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>return node with minimum key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ChildType 
<span class="currsymbol">getMax</span>
<script>explorer.outline.addDecl('getMax');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>return node with maximum key
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">PrintSideWays</span>
<script>explorer.outline.addDecl('PrintSideWays');</script>

(ParentType <span class="funcparam">parent</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>debug output; prints tree sideways
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</td></tr>
        <tr><td id="docfooter">
            Page was generated with
            <img src="candydoc/img/candydoc.gif" style="vertical-align:middle; position:relative; top:-1px">
            on Mon May 15 23:45:43 2006

        </td></tr>
    </table>
</div>
<script>
	explorer.packageExplorer.addModule("nova.ds.intrusive.aggregate");

	explorer.packageExplorer.addModule("nova.ds.intrusive.doublelink");

	explorer.packageExplorer.addModule("nova.ds.intrusive.doublelinkedlist");

	explorer.packageExplorer.addModule("nova.ds.intrusive.redblacktree");

	explorer.packageExplorer.addModule("nova.ds.intrusive.singlelinkedlist");

	explorer.packageExplorer.addModule("nova.math.matrix");

	explorer.packageExplorer.addModule("nova.math.optimization.partitionedbooleanquadric");

	explorer.packageExplorer.addModule("nova.ds.graph.weighted");
</script>
</body></html>


