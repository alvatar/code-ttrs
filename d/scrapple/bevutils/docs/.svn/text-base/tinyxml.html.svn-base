<html><head>
	<META http-equiv="content-type" content="text/html; charset=utf-8">
	<title>bevutils.tinyxml</title>
	</head><body>
	<h1>bevutils.tinyxml</h1>
	<!-- Generated by Ddoc from tinyxml.d -->
Copyright (c) Steve Teale 2007
This program is free software; you can use it for any purpose
subject to the following conditions.
<br><br>
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR ANY PARTICULAR PURPOSE.
<br><br>

<dl><dt><big>class <u>TinyXML</u>;
</big></dt>
<dd>A compact XML parser and object model.
<br><br>
<u>TinyXML</u> is aimed mainly at configuration files and the like.
<br><br>

 The <u>TinyXML</u> object model is navigated using a path syntax of two forms.  If tx is
 a <u>TinyXML</u> object, you can say:
<br><br>

 XMLElement e = tx("path_string");
 XMLElement e = tx &lt;&lt; "path_string"
<br><br>

 These both perform the same navigation operation, but while the first simply hands
 you a reference to the target element, the second can do the same, but also sets the
 tx object context.
<br><br>

 
<br><br>

<dl><dt><big>class <u>AttrList</u>;
</big></dt>
<dd>The representation of a set of attributes on an XML tag.
    
<br><br>

<dl><dt><big>void <u>addAttr</u>(char[] <i>name</i>, char[] <i>value</i>);
</big></dt>
<dd>Add a new attribute to the list.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The attribute <i>name</i>.</td></tr>
<tr><td>char[] <i>value</i></td>
<td>the attribute <i>value</i>.</td></tr>
</table><br>

</dd>
<dt><big>AttrList <u>clone</u>();
</big></dt>
<dd>Create a new attribute list identical to the one for which the method was called.
       
<br><br>

</dd>
<dt><big>void <u>delAttr</u>(char[] <i>name</i>);
</big></dt>
<dd>Delete an attribute from the list by <i>name</i>
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The <i>name</i> of the attribute to be deleted.</td></tr>
</table><br>

</dd>
<dt><big>int <u>length</u>();
</big></dt>
<dd>A property-style method to get the <u>length</u> of the list
       
<br><br>

</dd>
<dt><big>char[] <u>name</u>(int <i>i</i>);
</big></dt>
<dd>Get the <u>name</u> of the <i>i</i>'th attribute in the list.
<br><br>
<b>Params:</b><br>
<table><tr><td>int <i>i</i></td>
<td>The desired index.</td></tr>
</table><br>

</dd>
<dt><big>char[] <u>value</u>(int <i>i</i>);
</big></dt>
<dd>Get the name of the <i>i</i>'th <u>value</u> in the list.
<br><br>
<b>Params:</b><br>
<table><tr><td>int <i>i</i></td>
<td>The desired index.</td></tr>
</table><br>

</dd>
<dt><big>char[] <u>value</u>(char[] <i>name</i>);
</big></dt>
<dd>Get the <u>value</u> of an attribute by <i>name</i>.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The desired <i>name</i>.</td></tr>
</table><br>

</dd>
<dt><big>char[] <u>value</u>(char[] <i>name</i>, char[] <u>value</u>);
</big></dt>
<dd>Set the <u>value</u> of an attribute by <i>name</i>.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The <i>name</i> of the attribute.</td></tr>
</table><br>

</dd>
<dt><big>void <u>clear</u>();
</big></dt>
<dd>Clear the list
       
<br><br>

</dd>
<dt><big>char[] <u>format</u>();
</big></dt>
<dd>Formats the list into a string suitable for XML.
       
<br><br>

</dd>
</dl>
</dd>
<dt><big>class <u>XMLElement</u>;
</big></dt>
<dd>A base class for Tags, Comments and body text - EText
    
<br><br>

<dl><dt><big>abstract int <u>EType</u>();
</big></dt>
<dd>Abstract method to recover the element type.
       
<br><br>

</dd>
<dt><big>abstract char[] <u>format</u>(char[] <i>s</i>, int <i>indent</i>);
</big></dt>
<dd>Abstract method to <u>format</u> elements for XML.
       
<br><br>

</dd>
<dt><big>abstract char[] <u>PText</u>();
</big></dt>
<dd>Abstract method to recover a textual representation of the element.
       
<br><br>

</dd>
<dt><big>abstract char[] <u>getValue</u>(char[] <i>name</i>);
</big></dt>
<dd>Abstract method to recover an 'attribute' from the element
       
<br><br>

</dd>
<dt><big>abstract char[] <u>setValue</u>(char[] <i>name</i>, char[] <i>value</i>);
</big></dt>
<dd>Abstract method to set an 'attribute' of the element.
       
<br><br>

</dd>
<dt><big>abstract Tag <u>Parent</u>();
</big></dt>
<dd>Abstract method to recover the parent of the element, which will
 always be a Tag.
       
<br><br>

</dd>
</dl>
</dd>
<dt><big>class <u>EText</u>: bevutils.tinyxml.TinyXML.XMLElement;
</big></dt>
<dd>Class representing XML Tag body text.
    
<br><br>

<dl><dt><big>this(char[] <i>s</i>, Tag <i>parent</i>);
</big></dt>
<dd>Create an EText object and link it to a Tag.
       
<br><br>

</dd>
<dt><big>int <u>EType</u>();
</big></dt>
<dd>Get the element type - in this case TEXT.
       
<br><br>

</dd>
<dt><big>char[] <u>format</u>(char[] <i>s</i>, int <i>indent</i>);
</big></dt>
<dd>Format the text for inclusion in XML text.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>s</i></td>
<td>An existing string to which the text representing this element is appended.</td></tr>
<tr><td>int <i>indent</i></td>
<td>Degree to which the formatted text should be indented.</td></tr>
</table><br>
<b>Returns:</b><br>
The original string with the element text appended.
       
<br><br>

</dd>
<dt><big>char[] <u>PText</u>();
</big></dt>
<dd>Get a plain text version - just the text.
       
<br><br>

</dd>
<dt><big>char[] <u>getValue</u>(char[] <i>name</i>);
</big></dt>
<dd>Get an 'attribute' by <i>name</i> - in this class the <i>name</i> is ignored.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>A string value that is ignored.</td></tr>
</table><br>
<b>Returns:</b><br>
The plain text.
       
<br><br>

</dd>
<dt><big>char[] <u>setValue</u>(char[] <i>name</i>, char[] <i>value</i>);
</big></dt>
<dd>Set an 'attribute' by <i>name</i> - in this class the <i>name</i> is ignored.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>A string <i>value</i> that is ignored.</td></tr>
<tr><td>char[] <i>value</i></td>
<td>the <i>value</i> to be set for the text.</td></tr>
</table><br>
<b>Returns:</b><br>
The set plain text.
       
<br><br>

</dd>
<dt><big>Tag <u>Parent</u>();
</big></dt>
<dd>Get the element's parent.
       
<br><br>

</dd>
</dl>
</dd>
<dt><big>class <u>Comment</u>: bevutils.tinyxml.TinyXML.XMLElement;
</big></dt>
<dd>Class representing an XML comment.
    
<br><br>

<dl><dt><big>this(char[] <i>s</i>, Tag <i>parent</i>);
</big></dt>
<dd>Create a Comment object and link it to a Tag.
       
<br><br>

</dd>
<dt><big>int <u>EType</u>();
</big></dt>
<dd>Get the element type - in this case COMMENT.
       
<br><br>

</dd>
<dt><big>char[] <u>format</u>(char[] <i>s</i>, int <i>indent</i>);
</big></dt>
<dd>Format the text for inclusion in XML text.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>s</i></td>
<td>An existing string to which the text representing this element is appended.</td></tr>
<tr><td>int <i>indent</i></td>
<td>Degree to which the formatted text should be indented.</td></tr>
</table><br>
<b>Returns:</b><br>
The original string with the element text appended.
       
<br><br>

</dd>
<dt><big>char[] <u>PText</u>();
</big></dt>
<dd>Get a plain text version - the bare comment.
       
<br><br>

</dd>
<dt><big>char[] <u>getValue</u>(char[] <i>name</i>);
</big></dt>
<dd>Get an 'attribute' by <i>name</i> - in this class the <i>name</i> is ignored.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>A string value that is ignored.</td></tr>
</table><br>
<b>Returns:</b><br>
The plain text.
       
<br><br>

</dd>
<dt><big>char[] <u>setValue</u>(char[] <i>name</i>, char[] <i>value</i>);
</big></dt>
<dd>Set an 'attribute' by <i>name</i> - in this class the <i>name</i> is ignored.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>A string <i>value</i> that is ignored.</td></tr>
<tr><td>char[] <i>value</i></td>
<td>the <i>value</i> to be set for the text.</td></tr>
</table><br>
<b>Returns:</b><br>
The set plain text.
       
<br><br>

</dd>
<dt><big>Tag <u>Parent</u>();
</big></dt>
<dd>Get the element's parent.
       
<br><br>

</dd>
</dl>
</dd>
<dt><big>class <u>Tag</u>: bevutils.tinyxml.TinyXML.XMLElement;
</big></dt>
<dd>Class representing an XML <u>Tag</u> - &lt;tagname&gt; ... &lt;/tagname&gt;.
<br><br>
Tags are the structural building blocks of the TinyXML object model.
    
<br><br>

<dl><dt><big>this(TinyXML <i>so</i>, Tag <i>parentnode</i>);
</big></dt>
<dd>Create a Tag object from XML text and possibly link it to a Tag.
<br><br>
This constructor is called recursively to nibble Tag elements from a string
 originally representing the entire XML, and is in essence the XML parser.

<br><br>
<b>Params:</b><br>
<table><tr><td>TinyXML <i>so</i></td>
<td>The source TinyXML object - provides the context and the text to be parsed.
        If <i>so</i> is <b>null</b> this constructor just returns a bare Tag element.</td></tr>
<tr><td>Tag <i>parentnode</i></td>
<td>The tag that will be the parent of the new Tag.</td></tr>
</table><br>

</dd>
<dt><big>char[] <u>Name</u>();
</big></dt>
<dd>Get the Tag name - same as PText().
       
<br><br>

</dd>
<dt><big>int <u>EType</u>();
</big></dt>
<dd>Get the element type - in this case TAG.
       
<br><br>

</dd>
<dt><big>char[] <u>PText</u>();
</big></dt>
<dd>Get a plain text version - in this case simply the Tag name.
       
<br><br>

</dd>
<dt><big>Tag <u>Parent</u>();
</big></dt>
<dd>Get the element's parent.
       
<br><br>

</dd>
<dt><big>char[] <u>format</u>(char[] <i>s</i>, int <i>indent</i>);
</big></dt>
<dd>Format the text for inclusion in XML text.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>s</i></td>
<td>An existing string to which the text representing this element is appended.</td></tr>
<tr><td>int <i>indent</i></td>
<td>Degree to which the formatted text should be indented.</td></tr>
</table><br>
<b>Returns:</b><br>
The original string with the element text appended.
       
<br><br>

</dd>
<dt><big>static char[] <u>decode_entities</u>(char[] <i>s</i>);
</big></dt>
<dd>Decode &amp;lt; and &amp;amp; to &lt; and &amp;.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>s</i></td>
<td>The string to be decoded.</td></tr>
</table><br>
<b>Returns:</b><br>
The decoded string.
       
<br><br>

</dd>
<dt><big>static char[] <u>encode_entities</u>(char[] <i>s</i>);
</big></dt>
<dd>Encode &lt; and &amp; to &amp;lt; and &amp;amp;.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>s</i></td>
<td>The string to be encoded.</td></tr>
</table><br>
<b>Returns:</b><br>
The encoded string.
       
<br><br>

</dd>
<dt><big>char[] <u>getValue</u>(char[] <i>name</i>);
</big></dt>
<dd>Get an 'attribute' by <i>name</i> - in this class the <i>name</i> is used.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The <i>name</i> of the attribute.</td></tr>
</table><br>
<b>Returns:</b><br>
The attribute value.
       
<br><br>

</dd>
<dt><big>char[] <u>setValue</u>(char[] <i>name</i>, char[] <i>value</i>);
</big></dt>
<dd>Set an 'attribute' by <i>name</i> - in this class the <i>name</i> is used.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The <i>name</i> of the attribute.</td></tr>
<tr><td>char[] <i>value</i></td>
<td>the <i>value</i> to be set for the attribute.</td></tr>
</table><br>
<b>Returns:</b><br>
The set attribute <i>value</i>.
       
<br><br>

</dd>
<dt><big>void <u>addAttribute</u>(char[] <i>name</i>, char[] <i>value</i>);
</big></dt>
<dd>Add a new attribute to the Tag element.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The attribute <i>name</i>.</td></tr>
<tr><td>char[] <i>value</i></td>
<td>the attribute <i>value</i>.</td></tr>
</table><br>

</dd>
<dt><big>void <u>deleteAttribute</u>(char[] <i>name</i>);
</big></dt>
<dd>Delete an attribute from the Tag element by <i>name</i>
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>The <i>name</i> of the attribute to be deleted.</td></tr>
</table><br>

</dd>
<dt><big>void <u>appendElement</u>(XMLElement <i>e</i>);
</big></dt>
<dd>Append an element to the child list of this Tag.
<br><br>
<b>Params:</b><br>
<table><tr><td>XMLElement <i>e</i></td>
<td>and XMLElement object.</td></tr>
</table><br>

</dd>
<dt><big>Tag <u>duplicate</u>();
</big></dt>
<dd>Duplicate this Tag object, attaching the <u>duplicate</u> immediately after
 this object in the parent object's child list.
<br><br>
<b>Returns:</b><br>
The duplicated object.
       
<br><br>

</dd>
<dt><big>char[][] <u>getTextFragments</u>();
</big></dt>
<dd>Get an array of text items in the body of this Tag.
<br><br>
These are fragments that are separated by child Tags or comments.*
<br><br>
<b>Returns:</b><br>
An array of strings.
       
<br><br>

</dd>
<dt><big>char[][] <u>getComments</u>();
</big></dt>
<dd>Get an array of comment text items in the body of this Tag.
<br><br>
<b>Returns:</b><br>
An array of strings.
       
<br><br>

</dd>
<dt><big>XMLElement <u>addAfter</u>(XMLElement <i>e</i>);
</big></dt>
<dd>Add an XMLElement after this Tag in its parent's child list.
<br><br>
<b>Params:</b><br>
<table><tr><td>XMLElement <i>e</i></td>
<td>An XMLElement object to be added.</td></tr>
</table><br>
<b>Returns:</b><br>
The added element.
       
<br><br>

</dd>
<dt><big>XMLElement <u>addBefore</u>(XMLElement <i>e</i>);
</big></dt>
<dd>Add an XMLElement before this Tag in its parent's child list.
<br><br>
<b>Params:</b><br>
<table><tr><td>XMLElement <i>e</i></td>
<td>An XMLElement object to be added.</td></tr>
</table><br>
<b>Returns:</b><br>
The added element.
       
<br><br>

</dd>
<dt><big>int <u>Tags</u>();
</big></dt>
<dd>Get the number of Tag objects in the child list of this Tag.
<br><br>
<b>Returns:</b><br>
Number of <u>Tags</u>.
       
<br><br>

</dd>
<dt><big>int <u>ETexts</u>();
</big></dt>
<dd>Get the number of EText objects in the child list of this Tag.
<br><br>
<b>Returns:</b><br>
Number of EText objects.
       
<br><br>

</dd>
<dt><big>int <u>Comments</u>();
</big></dt>
<dd>Get the number of Comment objects in the child list of this Tag.
<br><br>
<b>Returns:</b><br>
Number of Comment objects.
       
<br><br>

</dd>
<dt><big>int <u>Elements</u>();
</big></dt>
<dd>Get the number of elements in the child list of this Tag.
<br><br>
<b>Returns:</b><br>
Total number of child elements.
       
<br><br>

</dd>
<dt><big>XMLElement <u>opIndex</u>(int <i>index</i>, int <i>type</i>);
</big></dt>
<dd>Returns a child element of a specified <i>type</i> at a specified <i>index</i>.
<br><br>
The <i>index</i> is relative to the number of child elements of that <i>type</i>.

<br><br>
<b>Returns:</b><br>
The child element.
<br><br>

 To use the returned object, you must cast it to the <i>type</i> you specified, as in
 Tag t = cast(Tag) ptag[1, TAG];
       
<br><br>

</dd>
<dt><big>char[] <u>FirstText</u>();
</big></dt>
<dd>Returns the first EText child element of this Tag.
<br><br>
This is intended for use in the common case where the tag is like
 &lt;tag&gt;Body text&lt;/tag&gt;

<br><br>
<b>Returns:</b><br>
The child element.
       
<br><br>

</dd>
</dl>
</dd>
<dt><big>this(char[] <i>s</i>);
</big></dt>
<dd>Construct a TinyXML object from a string.
    
<br><br>

</dd>
<dt><big>this(File <i>f</i>);
</big></dt>
<dd>Construct a TinyXML object from a File.
    
<br><br>

</dd>
<dt><big>char[] <u>XML</u>();
</big></dt>
<dd>Generate formated <u>XML</u> text from a TinyXML object.
    
<br><br>

</dd>
<dt><big>XMLElement <u>opShl</u>(char[] <i>xpath</i>);
</big></dt>
<dd>Navigate to (access) an element in the TinyXML object model, setting the context to the found object
 if it is a Tag.
<br><br>
Use as in: XMLElement x = txml &lt;&lt; "path_expression";

<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>xpath</i></td>
<td>A string describing the required destination element.<br></td></tr>
</table><br>
<b>Usage:</b><br>
The <i>xpath</i> parameter may take the following forms:<br>
 /outer_tagname/tagname1/tagname2 ... - find a Tag element by element names<br>
 ^/tagname1/tagname2 ...    - equivalent to the above
<br><br>

 /outer_tagname/tagname1/#[0] - find a Tag by its offset under its parent<br>
 ^/tagname1/#[0] - equivalent
<br><br>

 /outer_tagname/tagname1/![0] - find a Comment by its offset under its parent<br>
 ^/tagname1/![0] - equivalent
<br><br>

 /outer_tagname/tagname1/'[0] - find a text element by its offset under its parent<br>
 ^/tagname1/'[0] - equivalent
<br><br>

 ./... - find an element down a path relative to the current context
    
<br><br>

</dd>
<dt><big>XMLElement <u>opIndex</u>(char[] <i>xpath</i>);
</big></dt>
<dd>Navigate to (access) an element in the TinyXML object model, without setting the context.
<br><br>
Use as in: XMLElement x = txml["path_expression"];

<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>xpath</i></td>
<td>A string describing the required destination element.<br>
<br><br>

 As described for opShl</td></tr>
</table><br>

</dd>
<dt><big>Tag <u>Context</u>();
</big></dt>
<dd>Return the Tag that is the current context.
    
<br><br>

</dd>
<dt><big>Tag <u>makeTag</u>(char[] <i>name</i>);
</big></dt>
<dd>Create a Tag element.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>name</i></td>
<td>Name of the Tag.</td></tr>
</table><br>
<b>Returns:</b><br>
The new Tag.
    
<br><br>

</dd>
<dt><big>Comment <u>makeComment</u>(char[] <i>text</i>);
</big></dt>
<dd>Create a Comment element.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>text</i></td>
<td>Text of the Comment.</td></tr>
</table><br>
<b>Returns:</b><br>
The new Comment.
    
<br><br>

</dd>
<dt><big>EText <u>makeEText</u>(char[] <i>text</i>);
</big></dt>
<dd>Create an EText element.
<br><br>
<b>Params:</b><br>
<table><tr><td>char[] <i>text</i></td>
<td>Text of the element.</td></tr>
</table><br>
<b>Returns:</b><br>
The new EText object.
    
<br><br>

</dd>
<dt><big>char[] <u>OuterName</u>();
</big></dt>
<dd>Return the name of the top-level Tag.
    
<br><br>

</dd>
<dt><big>bool <u>ok</u>();
</big></dt>
<dd>Check if test passed to the constructor parsed correctly.
    
<br><br>

</dd>
<dt><big>char[] <u>error</u>();
</big></dt>
<dd>Get the <u>error</u> message if it did not parse correctly.
    
<br><br>

</dd>
</dl>
</dd>
</dl>

	<hr><small>Page generated by <a href="http://www.digitalmars.com/d/ddoc.html">Ddoc</a>. </small>
	</body></html>
