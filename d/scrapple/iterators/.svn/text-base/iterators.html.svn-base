<html><head>
	<META http-equiv="content-type" content="text/html; charset=utf-8">
	<title>iterators</title>
	</head><body>
	<h1>iterators</h1>
	<!-- Generated by Ddoc from iterators.d -->
Python-like (yield) <u>iterators</u> for Digital Mars D
<br><br>
<b>Version:</b><br>
1.0
<br><br>
<b>Author:</b><br>
Witold Baryluk <baryluk@smp.if.uj.edu.pl>
 Copyright 2007
<br><br>
<b>Licence:</b><br>
BSD
<br><br>

This package may be redistributed under the terms of the UCB BSD
<br><br>
<b>License:</b><br>
Copyright (c) Witold Baryluk
All rights reserved.
<br><br>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
4. Neither the name of the Witold Baryluk nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.
<br><br>

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
<br><br>

 
<br><br>


<br><br>
<b>TODO:</b><br>
- Index variables shouldn't be inout.
	 - Shorter syntax (s.squers(), insted s.squers.ic())
	 - Neseting?
   - Remove unnacasary types: (mixin mainiter!(iter),
     insted mixin mainiter!(int, iter));
   - Reuse mainiter procedures in inneriter, becouse
     they are very similar.
   - Mayby void iter() , and return 0; is not needed really
 
<br><br>

<dl><dt><big>class <u>IterBreak</u>: object.Exception;
</big></dt>
<dd>Exception rised when user defined function in
  foreach breaks, which cancel iteration
	process, catched in opApply. 
<br><br>

<dl></dl>
</dd>
<dt><big>class <u>IterLast</u>: object.Exception;
</big></dt>
<dd>Similar to IterBreak, used to make last iteration. 
<br><br>

<dl></dl>
</dd>
<dt><big>template <u>mainiter</u>(V,alias f)</big></dt>
<dd>Mixin this template to use your class as
 iterator.
<br><br>
<b>Params:</b><br>
<table><tr><td>V</td>
<td>type of iterator (ie. double)</td></tr>
<tr><td>f</td>
<td>name of virtual method implementing iteration.</td></tr>
</table><br>
<b>Example:</b><br>
<pre class="d_code">  <font color=blue>class</font> Naturals(<font color=blue>int</font> n) {
    <font color=blue>int</font> iter() {
 	    <font color=blue>for</font> (<font color=blue>int</font> i = 1; i &lt;= n; i++) yield(i); <font color=green>// use yield to process next item
</font> 	    <font color=blue>return</font> 0;        <font color=green>// indicate correct end of iterator
</font>    }
    <font color=blue>mixin</font> <u>mainiter</u>!(<font color=blue>int</font>, iter);   <font color=green>// mixin iterator's stuff
</font>  }
  ...
  <font color=blue>foreach</font> (<font color=blue>int</font> x; <font color=blue>new</font> Naturals!(10)()) {
      ...
  }
</pre>
 
<br><br>

<dl><dt><big>void <u>yield</u>(V <i>v</i>);
</big></dt>
<dd>Used to process next iteration. 
<br><br>

</dd>
<dt><big>void <u>last</u>(V <i>v</i>);
</big></dt>
<dd>Used to process <u>last</u> iteration. 
<br><br>

</dd>
</dl>
</dd>
<dt><big>class <u>Iterator</u>(V);
</big></dt>
<dd>V type <u>Iterator</u> for method metoda0 
<br><br>

<dl><dt><big>this(int delegate(Iterator!(V)) metoda0);
</big></dt>
<dd><br><br>
</dd>
<dt><big>void <u>yield</u>(V <i>v</i>);
</big></dt>
<dd>Used to process next iteration. 
<br><br>

</dd>
<dt><big>void <u>last</u>(V <i>v</i>);
</big></dt>
<dd>Used to process <u>last</u> iteration. 
<br><br>

</dd>
</dl>
</dd>
<dt><big>template <u>inneriter</u>(V,alias metoda)</big></dt>
<dd>Mixin this template to use subclass as iterator.
 Use this when you want multiple iterators.
<br><br>
<b>Example:</b><br>
<pre class="d_code">  <font color=blue>class</font> MNaturals(<font color=blue>int</font> n) {
   <font color=blue>int</font> iter2(Iterator!(<font color=blue>double</font>) x) {
 	   <font color=blue>for</font> (<font color=blue>int</font> i = 1; i &lt;= n; i++) x.yield(i*i);
 	   <font color=blue>return</font> 0;
   }
   <font color=blue>mixin</font> <u>inneriter</u>!(<font color=blue>double</font>, iter2) squers;
   <font color=blue>int</font> iter3(Iterator!(<font color=blue>double</font>) x) {
 	   <font color=blue>for</font> (<font color=blue>int</font> i = 1; i &lt;= n; i++) x.yield(i*i*i);
 	   <font color=blue>return</font> 0;
   }
   <font color=blue>mixin</font> <u>inneriter</u>!(<font color=blue>double</font>, iter3) qubes;
 }
  ...
  <font color=blue>auto</font> s = <font color=blue>new</font> MNaturals!(10)();
  <font color=blue>foreach</font> (<font color=blue>int</font> x; s.squers.ic()) {
      ...
  }
  <font color=blue>foreach</font> (<font color=blue>int</font> x; s.qubes.ic()) {
      ...
  }
</pre>
 
<br><br>

<dl></dl>
</dd>
</dl>

	<hr><small>Page generated by <a href="http://www.digitalmars.com/d/ddoc.html">Ddoc</a>. </small>
	</body></html>
