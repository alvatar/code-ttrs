
<html><head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta content="text/javascript" http-equiv="content-script-type">
<title>lodepng.Common</title>
<link rel="stylesheet" type="text/css" href="candydoc/style.css">
<!--[if lt IE 7]><link rel="stylesheet" type="text/css" href="candydoc/ie56hack.css"><![endif]-->
<script language="JavaScript" src="candydoc/util.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/tree.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/explorer.js" type="text/javascript"></script>
</head><body>
<div id="tabarea"></div><div id="explorerclient"></div>
<div id="content"><script>explorer.initialize("lodepng.Common");</script>
	<table class="content">
		<tr><td id="docbody"><h1>lodepng.Common</h1><!-- Generated by Ddoc from lodepng/Common.d -->
Types and functions common to both the encode and decoder of lodepng, as well as image format
conversion routines
<br><br>
<b>License:</b><br>
Copyright (c) 2005-2007 Lode Vandevenne
All rights reserved.
<br><br>

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
<br><br>

  - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>
  - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>
  - Neither the name of Lode Vandevenne nor the names of his contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>
<br><br>

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<br><br>
<b>Authors:</b><br>
Lode Vandevenne (original version in C++), Lutger Blijdestijn (D version) : lutger dot blijdestijn at gmail dot com,
  Stewart Gordon (modifications)

<br><br>
<b>Date:</b><br>
August 7, 2007

<br><br>
<b>References:</b><br>
<a href="http://members.gamedev.net/lode/projects/LodePNG/">Original lodepng</a> <br>
<a href="http://www.w3.org/TR/PNG/">PNG Specification</a> <br>
<a href="http://www.libpng.org/pub/png/pngsuite.html">PNG Suite: set of test images</a> <br>
<a href="http://optipng.sourceforge.net/">OptiPNG: tool to experimentally optimize png images</a>
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">class 
<span class="currsymbol">PngException</span>
<script>explorer.outline.addDecl('PngException');</script>

: object.Exception;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Png specific exception.
<br><br>
Instead of errors codes, this port of lodepng makes use of exceptions.
		At the moment, the decoder is very strict and will tolerate no errors whatsoever even
		if they could safely be ignored. CRC checking is always done.
		This might be slightly relaxed in a future release to be more in line with the
		recommendations of the specification.

<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl></dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">enum 
<span class="currsymbol">ColorType</span>
<script>explorer.outline.addDecl('ColorType');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>An enumeration of the color types supported by the png format.
<br><br>
see the <a href="http://www.w3.org/TR/PNG/index-noobject.html#6Colour-values">png specification</a>
	for details.

<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Greyscale</span>
<script>explorer.outline.addDecl('Greyscale');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>allowed bit depths: 1, 2, 4, 8 and 16
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">RGB</span>
<script>explorer.outline.addDecl('RGB');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>allowed bit depths: 8 and 16
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Palette</span>
<script>explorer.outline.addDecl('Palette');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>allowed bit depths: 1, 2, 4 and 8
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">GreyscaleAlpha</span>
<script>explorer.outline.addDecl('GreyscaleAlpha');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>allowed bit depths: 8 and 16
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">RGBA</span>
<script>explorer.outline.addDecl('RGBA');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>allowed bit depths: 8 and 16
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Any</span>
<script>explorer.outline.addDecl('Any');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>one of the above
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">convert</span>
<script>explorer.outline.addDecl('convert');</script>

(ubyte[] <span class="funcparam">source</span>, ref PngInfo <span class="funcparam">info</span>, ColorType <span class="funcparam">destColorType</span> = cast(ColorType)cast(ubyte)6u);
<br>ubyte[] 
<span class="currsymbol">convert</span>
<script>explorer.outline.addDecl('convert');</script>

(ubyte[] <span class="funcparam">source</span>, PngInfo <span class="funcparam">info</span>, ref ubyte[] <span class="funcparam">buffer</span>, ColorType <span class="funcparam">destColorType</span> = cast(ColorType)cast(ubyte)6u);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Convert <span class="funcparam">source</span> pixels from the color type described by <span class="funcparam">info</span> the color type <span class="funcparam">destColorType</span>.
<br><br>
Conversion can be from any color type supported by the png specification to
	24 / 32 bit RGB(A). If RGBA is specified and the <span class="funcparam">info</span> has a colorkey, transparency is applied.
<br><br>

	If a buffer is given, it may be used to store the result and a slice from it can be returned.

<br><br>
<b>Returns:</b><br>
converted image in RGB(A) format, pixels are from left to right, top to bottom
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">struct 
<span class="currsymbol">PngImage</span>
<script>explorer.outline.addDecl('PngImage');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Description of the image.
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">static PngImage  
<span class="currsymbol">opCall</span>
<script>explorer.outline.addDecl('opCall');</script>

(uint <span class="funcparam">w</span>, uint <span class="funcparam">h</span>, ubyte <span class="funcparam">bd</span>, ColorType <span class="funcparam">ct</span>, ubyte <span class="funcparam">ilace</span> = cast(ubyte)0);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>constructor
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">width</span>
<script>explorer.outline.addDecl('width');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>in pixels
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">height</span>
<script>explorer.outline.addDecl('height');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>in pixels
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte 
<span class="currsymbol">bitDepth</span>
<script>explorer.outline.addDecl('bitDepth');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>bits per color channel, see also: ColorType
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte 
<span class="currsymbol">bpp</span>
<script>explorer.outline.addDecl('bpp');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>bits per pixel
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ColorType 
<span class="currsymbol">colorType</span>
<script>explorer.outline.addDecl('colorType');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>the color format, see also: ColorType
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">struct 
<span class="currsymbol">PngInfo</span>
<script>explorer.outline.addDecl('PngInfo');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Png file and image description.
<br><br>
A simple data type describing the png file. Usually the image field will contain all the
	required information.
<br><br>

	There is one member that behaves a bit different: parseText(bool). This is used to tell
	the decoder whether to ignore textual metadata (which it does by default).

<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">PngImage 
<span class="currsymbol">image</span>
<script>explorer.outline.addDecl('image');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Information related to the 
<span class="currsymbol">image</span>
<script>explorer.outline.addDecl('image');</script>

, see also: PngImage.
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">backgroundColor</span>
<script>explorer.outline.addDecl('backgroundColor');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Recommended background color or empty if none is given.
<br><br>
Interpretation of the array depends on the color type:
<br><br>

		<dl>		<dt>palette</dt>
				<dd>palette[
<span class="currsymbol">backgroundColor</span>
<script>explorer.outline.addDecl('backgroundColor');</script>

[0]] is the background color</dd>
			<dt>greyscale (8 bit or less) </dt>
				<dd>
<span class="currsymbol">backgroundColor</span>
<script>explorer.outline.addDecl('backgroundColor');</script>

[0] is used</dd>
			<dt>RGB(A) (8 bit or less)</dt>
				<dd>
<span class="currsymbol">backgroundColor</span>
<script>explorer.outline.addDecl('backgroundColor');</script>

[0..3] is the rgb triplet used</dd>
			<dt>16-bit greyscale or RGB(A)</dt>
				<dd>same as above, but the color/greyscale channels are 2 bytes wide</dd></dl>
<br><br>

	
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[4u][] 
<span class="currsymbol">palette</span>
<script>explorer.outline.addDecl('palette');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Palette colors or empty if this image does not make use of it.
<br><br>
Each 
<span class="currsymbol">palette</span>
<script>explorer.outline.addDecl('palette');</script>

 entry is a 32-bit RGBA pixel represented as an ubyte[4].
		  When a colorkey is specified, it is automatically applied to the 
<span class="currsymbol">palette</span>
<script>explorer.outline.addDecl('palette');</script>

 by the decoder.
<br><br>

	
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">colorKey</span>
<script>explorer.outline.addDecl('colorKey');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Whether there is a colorkey transparency associated with the png image.
<br><br>
Note that this is applicable only when the image has no seperate alpha channel, and
			the image format is not ColorType.Palette. In the latter case, transparency is always
			stored in the palette by the decoder.
			The transparent color is stored in keyR, keyG and keyB, for brevity greyscale is in keyR.
	
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ushort 
<span class="currsymbol">keyR</span>
<script>explorer.outline.addDecl('keyR');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ushort 
<span class="currsymbol">keyG</span>
<script>explorer.outline.addDecl('keyG');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ushort 
<span class="currsymbol">keyB</span>
<script>explorer.outline.addDecl('keyB');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parseText</span>
<script>explorer.outline.addDecl('parseText');</script>

(bool <span class="funcparam">flag</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>By default, lodepng will not parse textual metadata, set to <b>true</b> if this is desired.
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">parseText</span>
<script>explorer.outline.addDecl('parseText');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Whether parsing of metadata is enabled.
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">PngText 
<span class="currsymbol">text</span>
<script>explorer.outline.addDecl('text');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Retrieve the dictionary of textual metadata.
<br><br>
When no 
<span class="currsymbol">text</span>
<script>explorer.outline.addDecl('text');</script>

 is read, because it was set to be ignored or there wasn't any,
			this returns <b>null</b> so check the return value.
<br><br>

			In the case that a PngInfo instance is passed more than once to the api,
			an existing dictionary is not reused. Instead a new one will be
			created. It is therefore not necessary to copy anything, the strings they are all yours.
<br><br>

	
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">hasUnicodeText</span>
<script>explorer.outline.addDecl('hasUnicodeText');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Returns whether any unicode text has been stored.
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">hasLatin1Text</span>
<script>explorer.outline.addDecl('hasLatin1Text');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Returns whether any latin-1 text has been stored.
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">class 
<span class="currsymbol">PngText</span>
<script>explorer.outline.addDecl('PngText');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Dictionary of key-value textual metadata in utf-8 and / or latin-1 encoding.
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">this();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">this(char[][char[]] <span class="funcparam">unicodeText</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">this(ubyte[][ubyte[]] <span class="funcparam">latin1Text</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">opApply</span>
<script>explorer.outline.addDecl('opApply');</script>

(int delegate(ref char[] keyword, ref char[] contents) <span class="funcparam">dg</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Visit utf-8 dictionary
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">int 
<span class="currsymbol">opApply</span>
<script>explorer.outline.addDecl('opApply');</script>

(int delegate(ref ubyte[] keyword, ref ubyte[] contents) <span class="funcparam">dg</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Visit latin-1 dictionary
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">PngText 
<span class="currsymbol">opIndexAssign</span>
<script>explorer.outline.addDecl('opIndexAssign');</script>

(ubyte[] <span class="funcparam">value</span>, ubyte[] <span class="funcparam">keyword</span>);
<br>PngText 
<span class="currsymbol">opIndexAssign</span>
<script>explorer.outline.addDecl('opIndexAssign');</script>

(char[] <span class="funcparam">value</span>, char[] <span class="funcparam">keyword</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Assign key-<span class="funcparam">value</span> pair
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">numChannels</span>
<script>explorer.outline.addDecl('numChannels');</script>

(ColorType <span class="funcparam">colorType</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Number of color or alpha channels associated with this color type.
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">isGreyscale</span>
<script>explorer.outline.addDecl('isGreyscale');</script>

(ColorType <span class="funcparam">colorType</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">hasAlphaChannel</span>
<script>explorer.outline.addDecl('hasAlphaChannel');</script>

(ColorType <span class="funcparam">colorType</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">hasAlpha</span>
<script>explorer.outline.addDecl('hasAlpha');</script>

(ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Whether the image contains any alpha information (channel / colorkey / palette)
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">struct 
<span class="currsymbol">Chunk</span>
<script>explorer.outline.addDecl('Chunk');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Abstracts a png chunk
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">static Chunk  
<span class="currsymbol">fromStream</span>
<script>explorer.outline.addDecl('fromStream');</script>

(ubyte[] <span class="funcparam">byteStream</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Construct a Chunk from a stream of bytes
<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">byteStream</span></td>

               
<td>the whole chunk needs to be available in this array</td></tr>
</table><br>
<b>Returns:</b><br>
a crc-checked chunk from <span class="funcparam">byteStream</span>, the data is sliced, not copied
     
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">length</span>
<script>explorer.outline.addDecl('length');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><b>Returns:</b><br>
total 
<span class="currsymbol">length</span>
<script>explorer.outline.addDecl('length');</script>

 of this chunk (not only data)
     
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">Chunk  
<span class="currsymbol">dup</span>
<script>explorer.outline.addDecl('dup');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><b>Returns:</b><br>
chunk containing a copy of the data
     
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">type</span>
<script>explorer.outline.addDecl('type');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>
<span class="currsymbol">type</span>
<script>explorer.outline.addDecl('type');</script>

 of the chunk packed into a uint, see the png specification for details
     
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">data</span>
<script>explorer.outline.addDecl('data');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>(slice of) the 
<span class="currsymbol">data</span>
<script>explorer.outline.addDecl('data');</script>

 of this chunk
     
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">toUint</span>
<script>explorer.outline.addDecl('toUint');</script>

(ubyte <span class="funcparam">a</span>, ubyte <span class="funcparam">b</span>, ubyte <span class="funcparam">c</span>, ubyte <span class="funcparam">d</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte <span class="funcparam">a</span></td>

               
<td></td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte <span class="funcparam">b</span></td>

               
<td></td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte <span class="funcparam">c</span></td>

               
<td></td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte <span class="funcparam">d</span></td>

               
<td></td></tr>
</table><br>
<b>Returns:</b><br>
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">toUint</span>
<script>explorer.outline.addDecl('toUint');</script>

(ubyte[] <span class="funcparam">source</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td></td></tr>
</table><br>
<b>Returns:</b><br>
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">IHDR</span>
<script>explorer.outline.addDecl('IHDR');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">IDAT</span>
<script>explorer.outline.addDecl('IDAT');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">PLTE</span>
<script>explorer.outline.addDecl('PLTE');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">tRNS</span>
<script>explorer.outline.addDecl('tRNS');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">bKGD</span>
<script>explorer.outline.addDecl('bKGD');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">IEND</span>
<script>explorer.outline.addDecl('IEND');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">tEXt</span>
<script>explorer.outline.addDecl('tEXt');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">iTXt</span>
<script>explorer.outline.addDecl('iTXt');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">zTXt</span>
<script>explorer.outline.addDecl('zTXt');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">cHRM</span>
<script>explorer.outline.addDecl('cHRM');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">gAMA</span>
<script>explorer.outline.addDecl('gAMA');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">hIST</span>
<script>explorer.outline.addDecl('hIST');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">iCCP</span>
<script>explorer.outline.addDecl('iCCP');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">oFFs</span>
<script>explorer.outline.addDecl('oFFs');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">pCAL</span>
<script>explorer.outline.addDecl('pCAL');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">pHYs</span>
<script>explorer.outline.addDecl('pHYs');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">sBIT</span>
<script>explorer.outline.addDecl('sBIT');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">sCAL</span>
<script>explorer.outline.addDecl('sCAL');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">sPLT</span>
<script>explorer.outline.addDecl('sPLT');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">const uint 
<span class="currsymbol">sRGB</span>
<script>explorer.outline.addDecl('sRGB');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">char[] 
<span class="currsymbol">chunkTypeToString</span>
<script>explorer.outline.addDecl('chunkTypeToString');</script>

(uint <span class="funcparam">chunkType</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">uint <span class="funcparam">chunkType</span></td>

               
<td></td></tr>
</table><br>
<b>Returns:</b><br>
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</td></tr>
		<tr><td id="docfooter">
			Page was generated with
			<img src="candydoc/img/candydoc.gif" style="vertical-align:middle; position:relative; top:-1px">
			on Mon Jan 21 14:51:37 2008

		</td></tr>
	</table>
</div>
<script>
	explorer.packageExplorer.addModuleFull("lodepng.Encode");
	explorer.packageExplorer.addModuleFull("lodepng.util");
	explorer.packageExplorer.addModuleFull("lodepng.Decode");
	explorer.packageExplorer.addModuleFull("lodepng.Common");
	explorer.packageExplorer.addModuleFull("lodepng.ZlibCodec");</script>
</body></html>


