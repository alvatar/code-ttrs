
<html><head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta content="text/javascript" http-equiv="content-script-type">
<title>lodepng.Decode</title>
<link rel="stylesheet" type="text/css" href="candydoc/style.css">
<!--[if lt IE 7]><link rel="stylesheet" type="text/css" href="candydoc/ie56hack.css"><![endif]-->
<script language="JavaScript" src="candydoc/util.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/tree.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/explorer.js" type="text/javascript"></script>
</head><body>
<div id="tabarea"></div><div id="explorerclient"></div>
<div id="content"><script>explorer.initialize("lodepng.Decode");</script>
	<table class="content">
		<tr><td id="docbody"><h1>lodepng.Decode</h1><!-- Generated by Ddoc from lodepng/Decode.d -->
<b>License:</b><br>
Copyright (c) 2005-2007 Lode Vandevenne
All rights reserved.
<br><br>

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
<br><br>

  - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>
  - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>
  - Neither the name of Lode Vandevenne nor the names of his contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>
<br><br>

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<br><br>
<b>Authors:</b><br>
Lode Vandevenne (original version in C++), Lutger Blijdestijn (D version) : lutger dot blijdestijn at gmail dot com.

<br><br>
<b>About:</b><br>
The decoder is small but sufficient for most purposes. It is compliant to the png specification and
has been tested with the png suite. To decode images, only <i>decode</i> is needed. The <i>decode32</i> function is for convenience,
it can decode and convert to the common 32-bit RGBA format in one go.
The rest of the api exposes the low-level functionality of lodepng, which is made available in order to use this library
for png-editing purposes.
<br>
This module publicly imports lodepng.Common, where you'll find the data types used by both the encoder
and decoder, as well as some utility and image format conversion routines.

<br><br>
<b>Date:</b><br>
Januari 16, 2008

<br><br>
<b>Examples:</b><br>
Here is an example how you could use LodePNG with opengl, see the api documentation for details.
<pre class="d_code"><font color=blue>uint</font> loadPNG(<font color=blue>char</font>[] filename)
{
    <font color=blue>uint</font> textureID;

    glEnable(GL_TEXTURE_2D);
    glGenTextures(1, &amp;textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);

    PngInfo info;
    <font color=blue>ubyte</font>[] image = decode32(<font color=blue>cast</font>(<font color=blue>ubyte</font>[])std.file.read(filename), info);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, info.image.width, info.image.height, 0, GL_RGBA, GL_UNSIGNED_BYTE,
                        image.ptr);
    <font color=blue>return</font> textureID;
}
</pre>

<br><br>
<b>Features:</b><br>
The following features are supported by the decoder:
<ul>
    <li> conformant decoding of PNGs (all color types, bit depth, interlace mode, CRC checking, etc.)</li>
    <li> support for translucent PNG's, including translucent palettes and color key</li>
    <li> textual key-value meta-data</li>
    <li> the following chunks are interpreted by the decoder
        <ul>
            <li>IHDR (image information)</li>
            <li>PLTE (color palette)</li>
            <li>IDAT (pixel data)</li>
            <li>IEND (the final chunk)</li>
            <li>tRNS (transparency for palettized images)</li>
            <li>bKGD (suggested background color)</li>
            <li>tEXt (uncompressed latin-1 key-value strings)</li>
            <li>zTXt (compressed latin-1 key-value strings)</li>
            <li>iTXt (utf8 key-value strings)</li>
        </ul>
   </li>
</UL>

<br><br>
<b>Limitations:</b><br>
The following features are not supported.
<ul>
    <li> Streaming / progressive display. All data must be available and is processed in one call.</li>
    <li> The following optional chunk types are not interpreted by the decoder
        <ul>
            <li>cHRM (device independent color info)
            <li>gAMA (device independent color info)
            <li>iCCP (device independent color info)
            <li>sBIT (original number of significant bits)
            <li>sRGB (device independent color info)
            <li>pHYs (physical pixel dimensions)
            <li>sPLT (suggested reduced palette)
            <li>tIME (last image modification time)
        </ul>
    </li>
</ul>
<br><br>


<br><br>
<b>References:</b><br>
<a href="http://members.gamedev.net/lode/projects/LodePNG/">Original lodepng</a> <br>
<a href="http://www.w3.org/TR/PNG/">PNG Specification</a> <br>
<a href="http://www.libpng.org/pub/png/pngsuite.html">PNG Suite: set of test images</a> <br>
<a href="http://optipng.sourceforge.net/">OptiPNG: tool to experimentally optimize png images</a>
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">decode</span>
<script>explorer.outline.addDecl('decode');</script>

(ubyte[] <span class="funcparam">source</span>, ref PngInfo <span class="funcparam">info</span>, ubyte[] <span class="funcparam">buffer</span> = null, int delegate(ref Chunk ) <span class="funcparam">dg</span> = null);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Decode <span class="funcparam">source</span> png file
<br><br>
If a <span class="funcparam">buffer</span> is provided, it may be used to store the result. See bufferSize for details.

<br><br>
<b>Throws:</b><br>
PngException

<br><br>
<b>Returns:</b><br>
Decoded image pixels. The color format of the resulting image is the
    same as the <span class="funcparam">source</span> image, see lodepng.Common.convert and decode32 if a specific color format
    is desired.

<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>a png file</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">PngInfo <span class="funcparam">info</span></td>

               
<td>information about the image will be stored in here</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">buffer</span></td>

               
<td>optionally provide an array to use as a <span class="funcparam">buffer</span> while decoding</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">int delegate(ref Chunk ) <span class="funcparam">dg</span></td>

               
<td>optionally provide a delegate that will be called for (and only for) unknown chunks</td></tr>
</table><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">decode32</span>
<script>explorer.outline.addDecl('decode32');</script>

(ubyte[] <span class="funcparam">source</span>, ref PngInfo <span class="funcparam">info</span>, ubyte[] <span class="funcparam">buffer</span> = null);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Decode <span class="funcparam">source</span> png file to 32-bit RGBA format
<br><br>
<b>Throws:</b><br>
PngException

<br><br>
<b>Returns:</b><br>
decoded image pixels in 32-bit RGBA format

<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>a png file</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">PngInfo <span class="funcparam">info</span></td>

               
<td>information about the image will be stored in here</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">buffer</span></td>

               
<td>optionally provide an array to use as a <span class="funcparam">buffer</span> while decoding</td></tr>
</table><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">PngImage  
<span class="currsymbol">readHeader</span>
<script>explorer.outline.addDecl('readHeader');</script>

(ubyte[] <span class="funcparam">source</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Parse png image header from memory.
<br><br>
<b>Throws:</b><br>
PngException

<br><br>
<b>Returns:</b><br>
header information

<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>must contain the first 33 bytes of a png file</td></tr>
</table><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">iterateChunks</span>
<script>explorer.outline.addDecl('iterateChunks');</script>

(ubyte[] <span class="funcparam">source</span>, out PngImage <span class="funcparam">image</span>, int delegate(ref Chunk ) <span class="funcparam">dg</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Iterates through chunks in <span class="funcparam">source</span>, parses only the header
<br><br>
<b>Throws:</b><br>
PngException
<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>a png file</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">PngImage <span class="funcparam">image</span></td>

               
<td>the parsed header</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">int delegate(ref Chunk ) <span class="funcparam">dg</span></td>

               
<td>will be called for each chunk, return anything other than 0 to stop iterating</td></tr>
</table><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">class 
<span class="currsymbol">PngDecoder</span>
<script>explorer.outline.addDecl('PngDecoder');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>decode IDAT data
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">this(PngImage <span class="funcparam">image</span>);
<br>this(PngImage <span class="funcparam">image</span>, ref ubyte[] <span class="funcparam">buffer</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>constructor 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">opCall</span>
<script>explorer.outline.addDecl('opCall');</script>

(ref ubyte[] <span class="funcparam">data</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>inflate, call multiple times if there are more than 1 IDAT chunks to be decompressed
<br><br>
<b>Throws:</b><br>
ZlibException
<br><br>
<b>Params:</b><br>
<table></table><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">ended</span>
<script>explorer.outline.addDecl('ended');</script>

();
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Whether inflation has completed
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">reconstructImage</span>
<script>explorer.outline.addDecl('reconstructImage');</script>

(ubyte[] <span class="funcparam">filtered</span> = null);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Apply reconstruction filters and deinterlace if required
<br><br>
note that ended() must return <b>true</b> before this function can be called if no data is provided

<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">filtered</span></td>

               
<td>optionally provide uncompressed <span class="funcparam">filtered</span> pixels yourself</td></tr>
</table><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">parseChunk</span>
<script>explorer.outline.addDecl('parseChunk');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse any known <span class="funcparam">chunk</span> except IDAT
<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">Chunk <span class="funcparam">chunk</span></td>

               
<td><span class="funcparam">chunk</span> to be parsed</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">PngInfo <span class="funcparam">info</span></td>

               
<td>parsed information will be written to <span class="funcparam">info</span></td></tr>
</table><br>
<b>Returns:</b><br>
<b>true</b> if a <span class="funcparam">chunk</span> is parsed, <b>false</b> otherwise

<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parsePLTE</span>
<script>explorer.outline.addDecl('parsePLTE');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse palette <span class="funcparam">chunk</span> 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parsetRNS</span>
<script>explorer.outline.addDecl('parsetRNS');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse transparency <span class="funcparam">chunk</span> 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parsebKGD</span>
<script>explorer.outline.addDecl('parsebKGD');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse background color <span class="funcparam">chunk</span> 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parsetTXt</span>
<script>explorer.outline.addDecl('parsetTXt');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse latin1 text <span class="funcparam">chunk</span> 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parsezTXt</span>
<script>explorer.outline.addDecl('parsezTXt');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse latin1 compressed text <span class="funcparam">chunk</span> 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">void 
<span class="currsymbol">parseiTXt</span>
<script>explorer.outline.addDecl('parseiTXt');</script>

(ref Chunk <span class="funcparam">chunk</span>, ref PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>parse unicode text <span class="funcparam">chunk</span> 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">uint 
<span class="currsymbol">bufferSize</span>
<script>explorer.outline.addDecl('bufferSize');</script>

(ref PngImage <span class="funcparam">image</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Predict size of buffer needed for decoding
<br><br>
Estimate of the amount of heap memory needed to decode an <span class="funcparam">image</span>. Interlaced images, images
        with a color format of less than 8 bits per pixel and the parsing of certain information
        such as text will allocate more heap memory.
<br><br>

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</td></tr>
		<tr><td id="docfooter">
			Page was generated with
			<img src="candydoc/img/candydoc.gif" style="vertical-align:middle; position:relative; top:-1px">
			on Wed Jan 16 16:10:10 2008

		</td></tr>
	</table>
</div>
<script>
	explorer.packageExplorer.addModuleFull("lodepng.Encode");
	explorer.packageExplorer.addModuleFull("lodepng.util");
	explorer.packageExplorer.addModuleFull("lodepng.Decode");
	explorer.packageExplorer.addModuleFull("lodepng.Common");
	explorer.packageExplorer.addModuleFull("lodepng.ZlibCodec");</script>
</body></html>


