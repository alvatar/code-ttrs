
<html><head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta content="text/javascript" http-equiv="content-script-type">
<title>lodepng.Encode</title>
<link rel="stylesheet" type="text/css" href="candydoc/style.css">
<!--[if lt IE 7]><link rel="stylesheet" type="text/css" href="candydoc/ie56hack.css"><![endif]-->
<script language="JavaScript" src="candydoc/util.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/tree.js" type="text/javascript"></script>
<script language="JavaScript" src="candydoc/explorer.js" type="text/javascript"></script>
</head><body>
<div id="tabarea"></div><div id="explorerclient"></div>
<div id="content"><script>explorer.initialize("lodepng.Encode");</script>
	<table class="content">
		<tr><td id="docbody"><h1>lodepng.Encode</h1><!-- Generated by Ddoc from lodepng/Encode.d -->
<b>License:</b><br>
Copyright (c) 2005-2007 Lode Vandevenne
All rights reserved.
<br><br>

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
<br><br>

  - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>
  - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>
  - Neither the name of Lode Vandevenne nor the names of his contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>
<br><br>

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<br><br>
<b>Authors:</b><br>
Lode Vandevenne (original version in C++), Lutger Blijdestijn (D version) : lutger dot blijdestijn at gmail dot com,
  Stewart Gordon (bug fixes)

<br><br>
<b>Date:</b><br>
Januari 16, 2008

<br><br>
<b>About:</b><br>
The lodepng encoder can encode images of any of the supported png color formats to 24-bit RGB or
32-bit RGBA png images. Conversion, if needed, is done automatically. It is compatible with the
Phobos and Tango libraries. <br>
This module publicly imports lodepng.Common, where you'll find the data types used by both the encoder
and decoder, as well as some utility and image format conversion routines.<br>

<br><br>
<b>Features:</b><br>
The following features are understood by the encoder:
<ul>
    <li> conformant encoding of 24-bit RGB and 32-bit RGBA PNG images </li>
    <li> automatic conversion of other color formats </li>
    <li> setting the compression and filter methods </li>
    <li> textual key-value metadata: normal and compressed latin1, unicode (utf-8) </li>
    <li> transparency / colorkey </li>
    <li> encoding raw chunks </li>
    <li> the following chunks are written by the encoder
        <ul>
            <li>IHDR (image information)</li>
            <li>IDAT (pixel data)</li>
            <li>IEND (the final chunk)</li>
            <li>tRNS (colorkey)</li>
            <li>bKGD (suggested background color) </li>
            <li>tEXt (uncompressed latin-1 key-value strings)</li>
            <li>zTXt (compressed latin-1 key-value strings)</li>
            <li>iTXt (utf8 key-value strings)</li>
        </ul>
   </li>
</UL>
<br><br>

<b>Limitations:</b><br>
The following features are not supported.
<ul>
    <li> Ouput in any color formats other than 24-bit RGB or 32-bit RGBA</li>
    <li> Interlacing </li>
    <li> The encoder does not understand the following chunk types:
        <ul>
            <li>PLTE (color palette)</li>
            <li>cHRM (device independent color info) </li>
            <li>gAMA (device independent color info) </li>
            <li>iCCP (device independent color info) </li>
            <li>sBIT (original number of significant bits) </li>
            <li>sRGB (device independent color info) </li>
            <li>pHYs (physical pixel dimensions) </li>
            <li>sPLT (suggested reduced palette) </li>
            <li>tIME (last image modification time) </li>
        </ul>
    </li>
</ul>

<br><br>
<b>References:</b><br>
<a href="http://members.gamedev.net/lode/projects/LodePNG/">Original lodepng</a> <br>
<a href="http://www.w3.org/TR/PNG/">PNG Specification</a> <br>
<a href="http://www.libpng.org/pub/png/pngsuite.html">PNG Suite: set of test images</a> <br>
<a href="http://optipng.sourceforge.net/">OptiPNG: tool to experimentally optimize png images</a>
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">encode</span>
<script>explorer.outline.addDecl('encode');</script>

(ubyte[] <span class="funcparam">source</span>, PngInfo <span class="funcparam">info</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Encode pixels as a png file
<br><br>
This function will attempt to convert to 24-bit RGB if it is a lossless operation, otherwise
        the resulting image will be in the 32-bit RGBA format. The array returned can be written to disk
        as a png file.

<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>the pixels to be encoded</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">PngInfo <span class="funcparam">info</span></td>

               
<td>description of the <span class="funcparam">source</span> pixels</td></tr>
</table><br>
<b>Throws:</b><br>
PngException
<br><br>
<b>Returns:</b><br>
png file of the raw pixels provided by <span class="funcparam">source</span> and described by settings.<span class="funcparam">info</span>
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">encode</span>
<script>explorer.outline.addDecl('encode');</script>

(ubyte[] <span class="funcparam">source</span>, PngInfo <span class="funcparam">info</span>, ref Chunk [] <span class="funcparam">chunkList</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Encode pixels and / or raw chunks as a png file
<br><br>
If <span class="funcparam">chunkList</span> contains IDAT chunks, they must be in order and no <span class="funcparam">source</span> pixels should be provided

<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>the pixels to be encoded, can be <b>null</b></td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">PngInfo <span class="funcparam">info</span></td>

               
<td>description of the <span class="funcparam">source</span> pixels</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">Chunk [] <span class="funcparam">chunkList</span></td>

               
<td>array of chunks to be written</td></tr>
</table><br>
<b>Throws:</b><br>
PngException
<br><br>
<b>Returns:</b><br>
png file of the raw pixels provided by <span class="funcparam">source</span> and described by <span class="funcparam">info</span>
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">encode</span>
<script>explorer.outline.addDecl('encode');</script>

(ubyte[] <span class="funcparam">source</span>, Settings <span class="funcparam">options</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Encode pixels as a png file
<br><br>
<b>See Also:</b><br>
Settings
<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>the pixels to be encoded</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">Settings <span class="funcparam">options</span></td>

               
<td>description and <span class="funcparam">options</span> needed to 
<span class="currsymbol">encode</span>
<script>explorer.outline.addDecl('encode');</script>

 the png file</td></tr>
</table><br>
<b>Throws:</b><br>
PngException
<br><br>
<b>Returns:</b><br>
png file of the raw pixels provided by <span class="funcparam">source</span> and described by <span class="funcparam">options</span>.info
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte[] 
<span class="currsymbol">encode</span>
<script>explorer.outline.addDecl('encode');</script>

(ubyte[] <span class="funcparam">source</span>, Settings <span class="funcparam">options</span>, ref Chunk [] <span class="funcparam">chunkList</span>);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Encode pixels as a png file
<br><br>
<b>See Also:</b><br>
Settings
<br><br>
<b>Params:</b><br>
<table><tr>
<td nowrap valign="top" style="padding-right: 8px">ubyte[] <span class="funcparam">source</span></td>

               
<td>the pixels to be encoded</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">Settings <span class="funcparam">options</span></td>

               
<td>description and <span class="funcparam">options</span> needed to 
<span class="currsymbol">encode</span>
<script>explorer.outline.addDecl('encode');</script>

 the png file</td></tr>
<tr>
<td nowrap valign="top" style="padding-right: 8px">Chunk [] <span class="funcparam">chunkList</span></td>

               
<td>array of chunks to be written</td></tr>
</table><br>
<b>Throws:</b><br>
PngException
<br><br>
<b>Returns:</b><br>
png file of the raw pixels provided by <span class="funcparam">source</span> and described by <span class="funcparam">options</span>.info
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">enum 
<span class="currsymbol">FilterStrategy</span>
<script>explorer.outline.addDecl('FilterStrategy');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Filter method
<br><br>
The png specification defines five types of filters. In addition each scanline can have a
        different filtering method applied (Dynamic). The latter method usually gives the best compression,
        when a fixed method is preferred paeth gives the best result most of the times.

<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">None</span>
<script>explorer.outline.addDecl('None');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Up</span>
<script>explorer.outline.addDecl('Up');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Sub</span>
<script>explorer.outline.addDecl('Sub');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Average</span>
<script>explorer.outline.addDecl('Average');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Paeth</span>
<script>explorer.outline.addDecl('Paeth');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Dynamic</span>
<script>explorer.outline.addDecl('Dynamic');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">enum 
<span class="currsymbol">CompressionStrategy</span>
<script>explorer.outline.addDecl('CompressionStrategy');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Zlib compression method
<br><br>
Which compression scheme works best depends on the type of image. Tools such as optipng can
        figure this out experimentally. However, RLE seems to give the best results in compression and
        performance.

<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Default</span>
<script>explorer.outline.addDecl('Default');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">Filtered</span>
<script>explorer.outline.addDecl('Filtered');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">RLE</span>
<script>explorer.outline.addDecl('RLE');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">
<span class="currsymbol">None</span>
<script>explorer.outline.addDecl('None');</script>

</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd><br><br>
</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">struct 
<span class="currsymbol">Settings</span>
<script>explorer.outline.addDecl('Settings');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Controls all information needed to encode a png file 
<br><br>


<script>explorer.outline.incSymbolLevel();</script>
<dl>
<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">static Settings  
<span class="currsymbol">opCall</span>
<script>explorer.outline.addDecl('opCall');</script>

();
<br>static Settings  
<span class="currsymbol">opCall</span>
<script>explorer.outline.addDecl('opCall');</script>

(PngInfo <span class="funcparam">info</span>, bool <span class="funcparam">autoRemoveAlpha</span> = false);
<br>static Settings  
<span class="currsymbol">opCall</span>
<script>explorer.outline.addDecl('opCall');</script>

(PngImage <span class="funcparam">image</span>, bool <span class="funcparam">autoRemoveAlpha</span> = false);
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>constructor 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">PngInfo 
<span class="currsymbol">info</span>
<script>explorer.outline.addDecl('info');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>png image information 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ColorType 
<span class="currsymbol">targetColorType</span>
<script>explorer.outline.addDecl('targetColorType');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>The colortype of the target image
<br><br>
lodepng can only encode in RGB(A) format (yet?)<br><br>. If the format is set ColorType.Any, RGB or
            RGBA is chosen depending on whether the source image has an alpha channel.
    

</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>



<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">autoRemoveAlpha</span>
<script>explorer.outline.addDecl('autoRemoveAlpha');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>Remove alpha channel
<br><br>
If set to <b>true</b> and the source image has an alpha channel, this will be removed if (and
            only if) the image is fully opaque or a colorkey can be written. This is considered a
            lossless operation.
    
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">bool 
<span class="currsymbol">compressText</span>
<script>explorer.outline.addDecl('compressText');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>if zlib compression is to be used on text 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">ubyte 
<span class="currsymbol">compressionLevel</span>
<script>explorer.outline.addDecl('compressionLevel');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>zlib compression level, affects memory use. Must be in range 0-9 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">FilterStrategy 
<span class="currsymbol">filterStrategy</span>
<script>explorer.outline.addDecl('filterStrategy');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>see FilterStrategy 
<br><br>

</dd>

<script>explorer.outline.writeEnabled = true;</script>
<dt><span class="decl">CompressionStrategy 
<span class="currsymbol">compressionStrategy</span>
<script>explorer.outline.addDecl('compressionStrategy');</script>

;
</span></dt>
<script>explorer.outline.writeEnabled = false;</script>


<dd>see CompressionStrategy 
<br><br>

</dd>
</dd>
</dl>
<script>explorer.outline.decSymbolLevel();</script>


)
</td></tr>
		<tr><td id="docfooter">
			Page was generated with
			<img src="candydoc/img/candydoc.gif" style="vertical-align:middle; position:relative; top:-1px">
			on Wed Jan 16 16:10:09 2008

		</td></tr>
	</table>
</div>
<script>
	explorer.packageExplorer.addModuleFull("lodepng.Encode");
	explorer.packageExplorer.addModuleFull("lodepng.util");
	explorer.packageExplorer.addModuleFull("lodepng.Decode");
	explorer.packageExplorer.addModuleFull("lodepng.Common");
	explorer.packageExplorer.addModuleFull("lodepng.ZlibCodec");</script>
</body></html>


